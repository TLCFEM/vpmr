cmake_minimum_required(VERSION 3.13)
project(vpmr)

set(CMAKE_CXX_STANDARD 17)

option(USE_AVX2 "Use AVX2" OFF)
if (USE_AVX2 AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
endif ()

include_directories(eigen)
include_directories(eigen/unsupported)
include_directories(mpreal)
include_directories(exprtk)
include_directories(exprtk-custom-types)
include_directories(pybind11/include)

if (MINGW)
    find_package(TBB REQUIRED)
    link_libraries(TBB::tbb)
else ()
    link_libraries(tbb)
endif ()

find_library(GMP_LIB gmp)
find_library(GMPXX_LIB gmpxx)
find_library(MPFR_LIB mpfr)

foreach (TGT "GMP" "GMPXX" "MPFR")
    if (${TGT}_LIB)
        message(STATUS "Found ${TGT}: ${${TGT}_LIB}.")
        link_libraries(${${TGT}_LIB})
    else ()
        message(FATAL_ERROR "${TGT} not found.")
    endif ()
endforeach ()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O0 -fprofile-arcs -ftest-coverage")
elseif (UNIX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto=auto")
endif ()

include(CheckIncludeFile)
check_include_file("Windows.h" HAVE_WINDOWS_H)
if (HAVE_WINDOWS_H)
    add_definitions(-DHAVE_WINDOWS_H)
endif ()

add_executable(vpmr src/VPMR.cpp)

option(USE_PYTHON3 "Use Python" ON)
if (USE_PYTHON3)
    find_package(Python 3 COMPONENTS Development Interpreter)
    if (Python_FOUND)
        add_subdirectory(pybind11)
        message(STATUS "Python3: ${Python_VERSION}")

        pybind11_add_module(_pyvpmr src/VPMR.cpp)
        target_compile_definitions(_pyvpmr PRIVATE PYVPMR)
    endif ()
endif ()

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_sources(${PROJECT_NAME} PRIVATE resource/vpmr.rc)
    if (MINGW)
        target_compile_options(${PROJECT_NAME} PRIVATE "-Wa,-mbig-obj")
        target_compile_options(_pyvpmr PRIVATE "-Wa,-mbig-obj")
    endif ()
endif ()

message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
